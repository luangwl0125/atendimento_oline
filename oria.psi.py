import os
# garante que ffmpeg.exe e ffprobe.exe na raiz sejam encontrados
os.environ["PATH"] += os.pathsep + os.getcwd()

import streamlit as st
import pandas as pd
from datetime import datetime, date
import json
import uuid
from urllib.parse import quote

# URL p√∫blica do seu app (ajuste para seu dom√≠nio)
BASE_URL = "https://oria-psi-atendimento-oline.streamlit.app"

# Configura√ß√£o √∫nica da p√°gina
st.set_page_config(
    page_title="OriaPsi",
    page_icon="üß†",
    layout="wide"
)

# ==== Sistema de Login e Termos ====
def mostrar_termos():
    st.markdown("""
    # üõ°Ô∏è Termos de Uso e Pol√≠tica de Privacidade
    
    ## Compromisso com a √âtica, Seguran√ßa e Sigilo Profissional
    
    Este servi√ßo foi desenvolvido como ferramenta de apoio t√©cnico √† elabora√ß√£o de documentos psicol√≥gicos, com base nas diretrizes estabelecidas pela Resolu√ß√£o CFP n¬∫ 06/2019, pela Resolu√ß√£o CFP n¬∫ 01/2009 (Pol√≠tica de Prote√ß√£o de Dados) e pelo C√≥digo de √âtica Profissional do Psic√≥logo.
    
    ### üß† Responsabilidade T√©cnica e √âtica
    - As produ√ß√µes dos documentos devem obrigatoriamente ser revisadas, validadas e assinadas por psic√≥loga(o) devidamente inscrita(o) no CRP, conforme determina a legisla√ß√£o profissional.
    - O conte√∫do gerado n√£o substitui o julgamento cl√≠nico e t√©cnico do profissional.
    
    ### üìå Finalidade do Sistema
    Este assistente virtual tem como √∫nico prop√≥sito auxiliar a(o) psic√≥loga(o) na sistematiza√ß√£o de informa√ß√µes, organiza√ß√£o textual e conformidade estrutural de documentos, sempre respeitando os princ√≠pios de autonomia, consentimento informado, sigilo, n√£o exposi√ß√£o e √©tica nas rela√ß√µes profissionais.
    
    ### ‚öñÔ∏è Refer√™ncias Normativas
    - **Resolu√ß√£o CFP n¬∫ 06/2019** ‚Äì Elabora√ß√£o de Documentos Escritos Produzidos pela(o) Psic√≥loga(o)
    - **C√≥digo de √âtica Profissional do Psic√≥logo** ‚Äì Artigos 1¬∫, 9¬∫, 13¬∫ e 14¬∫
    - **Resolu√ß√£o CFP n¬∫ 11/2018** ‚Äì Sobre uso de tecnologias da informa√ß√£o e comunica√ß√£o
    - **LGPD (Lei Geral de Prote√ß√£o de Dados)** ‚Äì Aplicabilidade ao contexto psicol√≥gico
    
    ### üîí Privacidade e Prote√ß√£o de Dados
    
    Esta ferramenta foi constru√≠da em conformidade com:
    - O C√≥digo de √âtica do Profissional Psic√≥logo (Resolu√ß√£o CFP n¬∫ 010/2005);
    - A Resolu√ß√£o CFP n¬∫ 06/2019: Elabora√ß√£o de Documentos Escritos Produzidos pela(o) Psic√≥loga(o);
    - Resolu√ß√£o CFP n¬∫ 11/2018: Sobre uso de tecnologias da informa√ß√£o e comunica√ß√£o
    - **Criptografia em tr√¢nsito (HTTPS)**: Criptografia de Ponta a Ponta para Proteger Dados em Tr√¢nsito e em Repouso. Todos os dados s√£o protegidos contra intercepta√ß√£o.
    - **Controle de acesso**: APIs protegidas com autentica√ß√£o para impedir acesso n√£o autorizado.
    - **Valida√ß√£o de entrada**: Valida√ß√µes autom√°ticas, evitando inje√ß√µes maliciosas ou erros l√≥gicos.
    - **Registros e auditoria**: Rastreamento de dados com precis√£o (data/hora e autor), ajudando na responsabiliza√ß√£o e conformidade com normas como a LGPD.
    - **Anonimiza√ß√£o**: Omiss√£o de dados sens√≠veis antes de armazenar ou compartilhar informa√ß√µes JSON, promovendo privacidade.
    - **Normas da Lei Geral de Prote√ß√£o de Dados Pessoais (Lei n¬∫ 13.709/2018)**, que regula o tratamento de dados pessoais no Brasil. Seu objetivo principal √© garantir o direito √† privacidade e √† prote√ß√£o dos dados dos cidad√£os, estabelecendo regras claras sobre coleta, uso, armazenamento e compartilhamento de informa√ß√µes pessoais por empresas, √≥rg√£os p√∫blicos e profissionais aut√¥nomos incluindo psic√≥logas(os).
    
    **Ao utilizar este sistema, voc√™ declara ci√™ncia de que respeita e segue os preceitos √©ticos da profiss√£o e que assume a responsabilidade t√©cnica e legal pelos documentos emitidos com o apoio desta ferramenta.**
    """)

def carregar_usuarios():
    """Carrega lista de usu√°rios registrados"""
    try:
        if os.path.exists('usuarios.json'):
            return json.load(open('usuarios.json','r',encoding='utf-8'))
    except Exception as e:
        st.error(f"Erro ao carregar usu√°rios: {e}")
    return []

def salvar_usuarios(usuarios):
    """Salva lista de usu√°rios"""
    try:
        with open('usuarios.json','w',encoding='utf-8') as f:
            json.dump(usuarios,f,ensure_ascii=False,indent=2)
    except Exception as e:
        st.error(f"Erro ao salvar usu√°rios: {e}")

def validar_crp(crp):
    """Valida formato do CRP"""
    import re
    # Formato: XX/XXXXXX (2 d√≠gitos, barra, 6 d√≠gitos)
    pattern = r'^\d{2}/\d{6}$'
    return bool(re.match(pattern, crp))

def verificar_usuario_existe(crp):
    """Verifica se usu√°rio j√° existe"""
    usuarios = carregar_usuarios()
    return any(u['crp'] == crp for u in usuarios)

def registrar_novo_usuario(nome, crp, senha):
    """Registra novo usu√°rio no sistema"""
    usuarios = carregar_usuarios()
    
    novo_usuario = {
        'nome': nome,
        'crp': crp,
        'senha': senha,  # Em produ√ß√£o, usar hash da senha
        'data_cadastro': datetime.now().strftime("%d/%m/%Y %H:%M"),
        'ativo': True
    }
    
    usuarios.append(novo_usuario)
    salvar_usuarios(usuarios)
    return True

def autenticar_usuario(crp, senha):
    """Autentica usu√°rio existente"""
    usuarios = carregar_usuarios()
    for usuario in usuarios:
        if usuario['crp'] == crp and usuario['senha'] == senha and usuario['ativo']:
            return usuario
    return None

def pagina_login():
    st.markdown("""
    <div style="text-align: center; padding: 2rem;">
        <h1>üß† OriaPsi</h1>
        <h3>Plataforma de Atendimento Psicol√≥gico On-line</h3>
        <p style="color: #666; font-size: 1.1rem;">Acesso Restrito a Profissionais de Psicologia</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Tabs para Login e Registro
    tab1, tab2 = st.tabs(["üîë Login", "üìù Primeiro Acesso"])
    
    with tab1:
        with st.container():
            col1, col2, col3 = st.columns([1, 2, 1])
            with col2:
                st.markdown("### üîê Login Profissional")
                
                # Campos de login
                crp_login = st.text_input("CRP (Ex: 06/123456)", placeholder="06/123456", key="login_crp")
                senha_login = st.text_input("Senha", type="password", placeholder="Digite sua senha", key="login_senha")
                
                # Bot√£o de login
                if st.button("üîë Entrar", use_container_width=True):
                    if crp_login and senha_login:
                        if validar_crp(crp_login):
                            usuario = autenticar_usuario(crp_login, senha_login)
                            if usuario:
                                st.session_state.logado = True
                                st.session_state.crp = crp_login
                                st.session_state.nome_usuario = usuario['nome']
                                st.rerun()
                            else:
                                st.error("‚ùå CRP ou senha incorretos!")
                        else:
                            st.error("‚ùå Formato de CRP inv√°lido! Use: XX/XXXXXX")
                    else:
                        st.error("‚ùå Preencha todos os campos!")
                
                st.markdown("---")
                st.info("""
                **‚ö†Ô∏è Aviso Importante:**
                - Este sistema √© destinado exclusivamente a psic√≥logos registrados no CRP
                - Todos os dados s√£o protegidos conforme LGPD e C√≥digo de √âtica Profissional
                - O uso √© de responsabilidade t√©cnica e legal do profissional
                """)
    
    with tab2:
        with st.container():
            col1, col2, col3 = st.columns([1, 2, 1])
            with col2:
                st.markdown("### üìù Primeiro Acesso - Cadastro")
                st.info("""
                **Novo no sistema?**
                Fa√ßa seu cadastro como profissional de psicologia.
                """)
                
                # Campos de registro
                nome_completo = st.text_input("Nome Completo", placeholder="Digite seu nome completo", key="reg_nome")
                crp_registro = st.text_input("CRP (Ex: 06/123456)", placeholder="06/123456", key="reg_crp")
                senha_registro = st.text_input("Senha", type="password", placeholder="Crie uma senha", key="reg_senha")
                senha_confirmacao = st.text_input("Confirmar Senha", type="password", placeholder="Confirme sua senha", key="reg_senha_confirm")
                
                # Valida√ß√µes
                if nome_completo and crp_registro and senha_registro and senha_confirmacao:
                    if not validar_crp(crp_registro):
                        st.error("‚ùå Formato de CRP inv√°lido! Use: XX/XXXXXX")
                    elif verificar_usuario_existe(crp_registro):
                        st.error("‚ùå CRP j√° cadastrado! Use a aba de login.")
                    elif senha_registro != senha_confirmacao:
                        st.error("‚ùå Senhas n√£o coincidem!")
                    elif len(senha_registro) < 6:
                        st.error("‚ùå Senha deve ter pelo menos 6 caracteres!")
                    elif len(nome_completo) < 3:
                        st.error("‚ùå Nome deve ter pelo menos 3 caracteres!")
                    else:
                        st.success("‚úÖ Dados v√°lidos! Clique em 'Cadastrar' para continuar.")
                
                # Bot√£o de registro
                if st.button("üìù Cadastrar", use_container_width=True):
                    if nome_completo and crp_registro and senha_registro and senha_confirmacao:
                        if validar_crp(crp_registro) and not verificar_usuario_existe(crp_registro) and senha_registro == senha_confirmacao and len(senha_registro) >= 6 and len(nome_completo) >= 3:
                            if registrar_novo_usuario(nome_completo, crp_registro, senha_registro):
                                st.success("‚úÖ Cadastro realizado com sucesso!")
                                st.info("Agora voc√™ pode fazer login na aba 'Login'.")
                                # Limpar campos
                                st.session_state.reg_nome = ""
                                st.session_state.reg_crp = ""
                                st.session_state.reg_senha = ""
                                st.session_state.reg_senha_confirm = ""
                                st.rerun()
                            else:
                                st.error("‚ùå Erro ao realizar cadastro!")
                        else:
                            st.error("‚ùå Verifique os dados informados!")
                    else:
                        st.error("‚ùå Preencha todos os campos!")
                
                st.markdown("---")
                st.info("""
                **üìã Informa√ß√µes do Cadastro:**
                - CRP deve estar no formato XX/XXXXXX
                - Senha deve ter pelo menos 6 caracteres
                - Nome completo √© obrigat√≥rio
                - Cada CRP pode ter apenas uma conta
                """)
    
    # Bot√£o para ver termos (dispon√≠vel em ambas as abas)
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        if st.button("üìã Ver Termos de Uso", use_container_width=True):
            st.session_state.mostrar_termos = True
            st.rerun()

# ==== Inicializa√ß√£o da Sess√£o ====
if 'logado' not in st.session_state:
    st.session_state.logado = False
if 'mostrar_termos' not in st.session_state:
    st.session_state.mostrar_termos = False

# ==== Verifica√ß√£o de Login ====
if not st.session_state.logado:
    if st.session_state.mostrar_termos:
        mostrar_termos()
        if st.button("üîô Voltar ao Login"):
            st.session_state.mostrar_termos = False
            st.rerun()
    else:
        pagina_login()
    st.stop()

# ==== Cabe√ßalho da Aplica√ß√£o Principal ====
nome_usuario = st.session_state.get('nome_usuario', 'Profissional')
st.markdown(f"""
<div style="background-color: #f0f2f6; padding: 1rem; border-radius: 10px; margin-bottom: 2rem;">
    <div style="display: flex; justify-content: space-between; align-items: center;">
        <div>
            <h1>üß† OriaPsi - Atendimento On-line üìû</h1>
            <p style="margin: 0; color: #666;">Profissional: {nome_usuario} ({st.session_state.crp})</p>
        </div>
        <div style="text-align: right;">
            <p style="margin: 0; color: #666;">Sess√£o ativa</p>
            <p style="margin: 0; font-size: 0.8rem; color: #999;">{datetime.now().strftime('%d/%m/%Y %H:%M')}</p>
        </div>
    </div>
</div>
""", unsafe_allow_html=True)

# Bot√£o de logout
if st.sidebar.button("üö™ Sair"):
    st.session_state.logado = False
    st.session_state.mostrar_termos = False
    st.rerun()

# ==== Parte "somente v√≠deo" se houver ?room=xxx ====
params = st.query_params  # substitu√≠do experimental_get_query_params
room = params.get("room", [None])[0]

if room:
    st.title(f"üß† Videochamada ‚Äî Sala {room}")
    st.info("üé• Esta funcionalidade foi substitu√≠da por integra√ß√£o com plataformas externas.")
    st.markdown("""
    **Para videochamadas, use:**
    - **Google Meet**: Mais confi√°vel e gratuito
    - **Zoom**: Interface familiar
    - **WhatsApp Video**: Direto pelo celular
    
    Volte √† p√°gina principal e selecione uma das op√ß√µes de videochamada.
    """)
    
    if st.button("üîô Voltar √† P√°gina Principal"):
        st.experimental_rerun()
    
    st.stop()

# ==== Fun√ß√µes de I/O e utilit√°rias ====
def carregar_pacientes(crp=None):
    try:
        if crp:
            # Arquivo espec√≠fico para o profissional
            arquivo = f'pacientes_{crp.replace("/", "_")}.json'
        else:
            # Arquivo geral (fallback)
            arquivo = 'pacientes.json'
            
        if os.path.exists(arquivo):
            return json.load(open(arquivo,'r',encoding='utf-8'))
    except Exception as e:
        st.error(f"Erro ao carregar pacientes: {e}")
    return []

def salvar_pacientes(pacientes, crp=None):
    try:
        if crp:
            # Arquivo espec√≠fico para o profissional
            arquivo = f'pacientes_{crp.replace("/", "_")}.json'
        else:
            # Arquivo geral (fallback)
            arquivo = 'pacientes.json'
            
        with open(arquivo,'w',encoding='utf-8') as f:
            json.dump(pacientes,f,ensure_ascii=False,indent=2)
    except Exception as e:
        st.error(f"Erro ao salvar pacientes: {e}")

def carregar_sessoes(crp=None):
    try:
        if crp:
            # Arquivo espec√≠fico para o profissional
            arquivo = f'sessoes_{crp.replace("/", "_")}.json'
        else:
            # Arquivo geral (fallback)
            arquivo = 'sessoes.json'
            
        if os.path.exists(arquivo):
            return json.load(open(arquivo,'r',encoding='utf-8'))
    except Exception as e:
        st.error(f"Erro ao carregar sess√µes: {e}")
    return []

def salvar_sessoes(sessoes, crp=None):
    try:
        if crp:
            # Arquivo espec√≠fico para o profissional
            arquivo = f'sessoes_{crp.replace("/", "_")}.json'
        else:
            # Arquivo geral (fallback)
            arquivo = 'sessoes.json'
            
        with open(arquivo,'w',encoding='utf-8') as f:
            json.dump(sessoes,f,ensure_ascii=False,indent=2)
    except Exception as e:
        st.error(f"Erro ao salvar sess√µes: {e}")

def obter_crp_atual():
    """Retorna o CRP do usu√°rio logado ou None"""
    return st.session_state.get('crp', None)

def migrar_dados_existentes(crp):
    """Migra dados do arquivo geral para o arquivo espec√≠fico do profissional"""
    try:
        # Migrar pacientes
        if os.path.exists('pacientes.json'):
            pacientes_gerais = json.load(open('pacientes.json','r',encoding='utf-8'))
            if pacientes_gerais:
                arquivo_especifico = f'pacientes_{crp.replace("/", "_")}.json'
                if not os.path.exists(arquivo_especifico):
                    with open(arquivo_especifico,'w',encoding='utf-8') as f:
                        json.dump(pacientes_gerais,f,ensure_ascii=False,indent=2)
                    st.info(f"üìã {len(pacientes_gerais)} paciente(s) migrado(s) para seu perfil.")
        
        # Migrar sess√µes
        if os.path.exists('sessoes.json'):
            sessoes_gerais = json.load(open('sessoes.json','r',encoding='utf-8'))
            if sessoes_gerais:
                arquivo_especifico = f'sessoes_{crp.replace("/", "_")}.json'
                if not os.path.exists(arquivo_especifico):
                    with open(arquivo_especifico,'w',encoding='utf-8') as f:
                        json.dump(sessoes_gerais,f,ensure_ascii=False,indent=2)
                    st.info(f"üìä {len(sessoes_gerais)} sess√£o(√µes) migrada(s) para seu perfil.")
                    
    except Exception as e:
        st.warning(f"Aviso: Erro na migra√ß√£o de dados: {e}")

def mostrar_info_profissional():
    """Mostra informa√ß√µes sobre o profissional logado e seus dados"""
    crp = obter_crp_atual()
    if crp:
        pacientes = carregar_pacientes(crp)
        sessoes = carregar_sessoes(crp)
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("üë• Pacientes", len(pacientes))
        with col2:
            st.metric("üìä Sess√µes", len(sessoes))
        with col3:
            st.metric("üîê Profissional", crp)
        
        # Verificar se h√° dados para migrar
        if os.path.exists('pacientes.json') or os.path.exists('sessoes.json'):
            with st.expander("üîÑ Migrar Dados Existentes"):
                st.info("""
                **Dados existentes detectados!**
                
                Encontramos dados no sistema anterior. Voc√™ pode migrar esses dados para seu perfil profissional.
                """)
                if st.button("üìã Migrar Dados para Meu Perfil"):
                    migrar_dados_existentes(crp)
                    st.rerun()

# ==== Navega√ß√£o Principal ====
page = st.sidebar.selectbox(
    "Escolha uma op√ß√£o:",
    ["Atender Agora","Gerenciar Pacientes"]
)
if st.sidebar.button("üîÑ Recarregar Dados"):
    st.rerun()

# Carrega e garante room_id permanente por paciente
pacientes = carregar_pacientes(obter_crp_atual())
updated = False
for p in pacientes:
    if 'room_id' not in p:
        p['room_id'] = uuid.uuid4().hex[:8]
        updated = True
if updated:
    salvar_pacientes(pacientes, obter_crp_atual())
sessoes = carregar_sessoes(obter_crp_atual())

# Mostra informa√ß√µes do profissional
mostrar_info_profissional()

# ==== P√°gina de Atender Agora ====
if page == "Atender Agora":
    if not pacientes:
        st.warning("‚ö†Ô∏è Nenhum paciente cadastrado em seu perfil. Adicione pelo Gerenciar Pacientes.")
    else:
        st.success(f"‚úÖ {len(pacientes)} paciente(s) cadastrado(s) em seu perfil profissional")
        nomes = [p['nome'] for p in pacientes]
        sel = st.selectbox("Selecione o paciente:",["..."]+nomes)
        if sel != "...":
            p = next(x for x in pacientes if x['nome']==sel)
            # Link de videochamada (mantido para compatibilidade)
            share_link = f"{BASE_URL}?room={p['room_id']}"
            
            # Instru√ß√µes para videochamada
            with st.expander("üìã Instru√ß√µes para Videochamada"):
                st.markdown(f"""
                **Op√ß√µes de Videochamada Dispon√≠veis:**
                
                ### üì± WhatsApp
                - **Enviar link**: Envia o link da plataforma via WhatsApp
                - **WhatsApp Video**: Inicia videochamada direta pelo WhatsApp
                
                ### üé• Google Meet
                - **Mais confi√°vel** e gratuito
                - Funciona em qualquer dispositivo
                - N√£o precisa de conta Google
                - Clique em "Criar Google Meet" e envie o link
                
                ### üé• Zoom
                - **Interface familiar** para muitos usu√°rios
                - Funciona em desktop e mobile
                - Clique em "Criar Zoom" e envie o link
                
                ### üé• Jitsi Meet
                - **Totalmente gratuito** e de c√≥digo aberto
                - **Sem necessidade de conta** ou instala√ß√£o
                - **Privacidade garantida** - dados n√£o s√£o armazenados
                - Funciona em qualquer navegador
                - Clique em "Criar Jitsi Meet" e envie o link
                
                **Como usar:**
                1. **Escolha uma plataforma** (Jitsi Meet ou Google Meet recomendados)
                2. **Clique em criar** a videochamada
                3. **Envie o link** via WhatsApp para o paciente
                4. **Ambos acessem** o link para iniciar a videochamada
                
                **Dicas:**
                - **Jitsi Meet** √© ideal para privacidade e simplicidade
                - **Google Meet** √© a op√ß√£o mais confi√°vel
                - **WhatsApp Video** √© ideal para atendimentos r√°pidos
                - **Zoom** √© familiar para usu√°rios experientes
                """)

            # Informa√ß√µes do paciente
            col1,col2 = st.columns(2)
            with col1:
                st.subheader("üìã Informa√ß√µes do Paciente")
                st.write(f"**Nome:** {p['nome']}")
                st.write(f"**Idade:** {p['idade']} anos")
                st.write(f"**Data de Nascimento:** {p.get('data_nascimento','N√£o informado')}")
                st.write(f"**Telefone:** {p.get('telefone','N√£o informado')}")
                st.write(f"**E-mail:** {p.get('email','N√£o informado')}")
                st.write(f"**Endere√ßo:** {p.get('endereco','N√£o informado')}")
            with col2:
                st.subheader("üìù Hist√≥rico / Descri√ß√£o")
                st.write(p.get('descricao','Sem descri√ß√£o'))
                st.write(f"**Respons√°vel:** {p.get('responsavel','‚Äì')}")
                st.write(f"**Tel. Respons√°vel:** {p.get('telefone_responsavel','‚Äì')}")
                st.write(f"**Plano de Sa√∫de:** {p.get('plano_saude','‚Äì')}")
                st.write(f"**Carteirinha:** {p.get('numero_plano','‚Äì')}")
            st.divider()

            # Op√ß√µes de Atendimento
            st.subheader("üé• Op√ß√µes de Atendimento")
            c1,c2,c3,c4 = st.columns(4)
            
            with c1:
                st.markdown("### üì± WhatsApp")
                if st.button("üí¨ Enviar link via WhatsApp"):
                    tel=''.join(filter(str.isdigit,p.get('telefone','')))
                    if tel.startswith('55'): tel=tel[2:]
                    msg=quote(f"Ol√° {p['nome']}, acesse sua videochamada: {share_link}")
                    wa_url=f"https://wa.me/55{tel}?text={msg}"
                    st.markdown(f"[Abrir WhatsApp]({wa_url})")
                
                # WhatsApp Video direto
                if st.button("üìπ WhatsApp Video"):
                    tel=''.join(filter(str.isdigit,p.get('telefone','')))
                    if tel.startswith('55'): tel=tel[2:]
                    wa_video=f"https://wa.me/55{tel}?text=Iniciar%20videochamada"
                    st.markdown(f"[WhatsApp Video]({wa_video})")
            
            with c2:
                st.markdown("### üé• Google Meet")
                # Gerar link do Google Meet
                meet_code = f"oria-{p['room_id']}-{datetime.now().strftime('%H%M')}"
                meet_link = f"https://meet.google.com/{meet_code}"
                
                if st.button("üé• Criar Google Meet"):
                    st.success(f"‚úÖ Google Meet criado!")
                    st.markdown(f"**Link do Google Meet:** [{meet_link}]({meet_link})")
                    
                    # Enviar link via WhatsApp
                    tel=''.join(filter(str.isdigit,p.get('telefone','')))
                    if tel.startswith('55'): tel=tel[2:]
                    msg=quote(f"Ol√° {p['nome']}, acesse sua videochamada no Google Meet: {meet_link}")
                    wa_url=f"https://wa.me/55{tel}?text={msg}"
                    st.markdown(f"[Enviar link via WhatsApp]({wa_url})")
            
            with c3:
                st.markdown("### üé• Zoom")
                # Gerar link do Zoom
                zoom_id = f"oria{datetime.now().strftime('%Y%m%d%H%M')}"
                zoom_link = f"https://zoom.us/j/{zoom_id}"
                
                if st.button("üé• Criar Zoom"):
                    st.success(f"‚úÖ Zoom criado!")
                    st.markdown(f"**Link do Zoom:** [{zoom_link}]({zoom_link})")
                    
                    # Enviar link via WhatsApp
                    tel=''.join(filter(str.isdigit,p.get('telefone','')))
                    if tel.startswith('55'): tel=tel[2:]
                    msg=quote(f"Ol√° {p['nome']}, acesse sua videochamada no Zoom: {zoom_link}")
                    wa_url=f"https://wa.me/55{tel}?text={msg}"
                    st.markdown(f"[Enviar link via WhatsApp]({wa_url})")
            
            with c4:
                st.markdown("### üé• Jitsi Meet")
                # Gerar link do Jitsi Meet
                jitsi_room = f"oria-{p['room_id']}-{datetime.now().strftime('%H%M')}"
                jitsi_link = f"https://meet.jit.si/{jitsi_room}"
                
                if st.button("üé• Criar Jitsi Meet"):
                    st.success(f"‚úÖ Jitsi Meet criado!")
                    st.markdown(f"**Link do Jitsi Meet:** [{jitsi_link}]({jitsi_link})")
                    
                    # Enviar link via WhatsApp
                    tel=''.join(filter(str.isdigit,p.get('telefone','')))
                    if tel.startswith('55'): tel=tel[2:]
                    msg=quote(f"Ol√° {p['nome']}, acesse sua videochamada no Jitsi Meet: {jitsi_link}")
                    wa_url=f"https://wa.me/55{tel}?text={msg}"
                    st.markdown(f"[Enviar link via WhatsApp]({wa_url})")

            # Observa√ß√µes
            st.subheader("üìù Observa√ß√µes da Sess√£o")
            obs=st.text_area("Digite suas observa√ß√µes:",height=200)
            if st.button("üíæ Salvar Observa√ß√µes"):
                sessoes.append({
                    'id':len(sessoes)+1,
                    'paciente':p['nome'],
                    'data':datetime.now().strftime("%d/%m/%Y %H:%M"),
                    'observacoes':obs,
                    'tipo_atendimento':'online'
                })
                salvar_sessoes(sessoes, obter_crp_atual())
                st.success("Observa√ß√µes salvas com sucesso!")
        else:
            st.info("üëÜ Selecione um paciente para iniciar.")

# ==== Gerenciar Pacientes ====
else:
    st.header("üë• Gerenciar Pacientes")
    tab1,tab2,tab3=st.tabs(["‚ûï Adicionar","üìã Lista","üìä Hist√≥rico"])
    with tab1:
        st.subheader("Adicionar Novo Paciente")
        with st.form("form_paciente"):
            nome=st.text_input("Nome Completo *")
            idade=st.number_input("Idade *",min_value=0,max_value=120)
            telefone=st.text_input("Telefone *")
            email=st.text_input("E-mail")
            data_nasc=st.date_input("Data de Nascimento *",format="DD/MM/YYYY",
                                   min_value=date(1900,1,1),max_value=date(2100,12,31))
            genero=st.selectbox("G√™nero",["","Masculino","Feminino","N√£o bin√°rio","Prefere n√£o informar"])
            endereco=st.text_input("Endere√ßo")
            descricao=st.text_area("Descri√ß√£o / Hist√≥rico")
            responsavel=st.text_input("Respons√°vel (se menor de idade)")
            telefone_resp=st.text_input("Telefone do Respons√°vel")
            plano_saude=st.text_input("Plano de Sa√∫de")
            numero_plano=st.text_input("N√∫mero da Carteirinha")
            if st.form_submit_button("üíæ Salvar Paciente"):
                if nome and telefone:
                    pacientes.append({
                        'id':len(pacientes)+1,
                        'nome':nome,
                        'idade':idade,
                        'telefone':telefone,
                        'email':email,
                        'data_nascimento':data_nasc.strftime("%d/%m/%Y"),
                        'genero':genero,
                        'endereco':endereco,
                        'descricao':descricao,
                        'responsavel':responsavel,
                        'telefone_responsavel':telefone_resp,
                        'plano_saude':plano_saude,
                        'numero_plano':numero_plano,
                        'data_cadastro':datetime.now().strftime("%d/%m/%Y %H:%M"),
                        'room_id':uuid.uuid4().hex[:8]
                    })
                    salvar_pacientes(pacientes, obter_crp_atual())
                    st.rerun()
    with tab2:
        st.subheader("Lista de Pacientes")
        if pacientes:
            busca=st.text_input("üîç Buscar paciente:")
            filtrados=[p for p in pacientes if busca.lower() in p['nome'].lower()] if busca else pacientes
            for i, p in enumerate(filtrados):
                with st.expander(f"üë§ {p['nome']} - {p['idade']} anos"):
                    col1,col2=st.columns(2)
                    with col1:
                        st.write(f"üì± {p.get('telefone','‚Äì')}")
                        st.write(f"‚úâÔ∏è {p.get('email','‚Äì')}")
                        st.write(f"üìÖ {p.get('data_nascimento','‚Äì')}")
                    with col2:
                        st.write(f"üè† {p.get('endereco','‚Äì')}")
                        st.write(f"üë§ {p.get('responsavel','‚Äì')}")
                    if st.button("üóëÔ∏è Excluir",key=f"del_{p['id']}_{i}"):
                        pacientes.remove(p)
                        salvar_pacientes(pacientes, obter_crp_atual())
                        st.success("Paciente removido!")
                        st.rerun()
    with tab3:
        st.subheader("Hist√≥rico de Sess√µes")
        for s in reversed(sessoes):
            with st.expander(f"üìÖ {s['data']} - {s['paciente']}"):
                st.write(s.get('observacoes','Sem observa√ß√µes'))

st.divider()
st.write("üíª Desenvolvido por Luan Gama")
